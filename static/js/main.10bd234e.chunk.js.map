{"version":3,"sources":["china-glaze.png","ikebana.png","logo.svg","App.js","Menu.js","serviceWorker.js","index.js"],"names":["module","exports","App","Menu","props","state","hover","mouseOver","bind","this","setState","imgChina","class","src","imageChina","imgIkebana","imageIkebana","className","onMouseOver","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,kJCuB5BC,I,iFCwBAC,G,kBAzCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,OAAO,GAEX,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALH,E,yEASdC,KAAKC,SAAS,CACVJ,OAAO,M,+BAIX,IAAMK,EAAW,yBAAKC,MAAM,MAAMC,IAAKC,MACjCC,EAAa,yBAAKH,MAAM,MAAMC,IAAKG,MACzC,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,UACX,6BACI,uBAAGC,YAAaT,KAAKF,WAArB,6BAEJ,6BACI,uBAAGW,YAAaT,KAAKF,WAArB,iCAIR,yBAAKU,UAAU,YACX,6BACI,2BAAIR,KAAKJ,MAAMC,OAASK,IAE5B,6BACKF,KAAKJ,MAAMC,OAASS,S,GAjC1BI,IAAMC,YCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10bd234e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/china-glaze.10a15d9b.png\";","module.exports = __webpack_public_path__ + \"static/media/ikebana.adcca397.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport China from './China';\nimport Classic from './Classic';\nimport Ikebana from './Ikebana';\n\nfunction App() {\n  return (\n    <div>\n      <div>\n        <China />\n      </div>\n      <div>\n        <Classic />\n      </div>\n      <div>\n        <Ikebana />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport imageChina from './china-glaze.png';\nimport imageIkebana from './ikebana.png';\nimport './menu.scss'\n\nclass Menu extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hover: false\n        }\n        this.mouseOver = this.mouseOver.bind(this);\n        \n    }\n    mouseOver(){\n        this.setState({\n            hover: true,\n        })\n    }\n    render(){\n        const imgChina = <img class='img' src={imageChina} />;\n        const imgIkebana = <img class='img' src={imageIkebana} />;\n        return(\n            <div className='main'>\n                <div className='navbar'>\n                    <div>\n                        <p onMouseOver={this.mouseOver}>China glaze Landing Page</p>\n                    </div>\n                    <div>\n                        <p onMouseOver={this.mouseOver}>Ikebana Musium Landing Page</p>\n                    </div>\n                </div>\n                \n                <div className='showcase'>\n                    <div>\n                        <p>{this.state.hover && imgChina}</p>\n                    </div>\n                    <div>\n                        {this.state.hover && imgIkebana}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Menu;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport Menu from './Menu';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Menu />, document.getElementById('menu'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}